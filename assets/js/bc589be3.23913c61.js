"use strict";(self.webpackChunkrest_docs=self.webpackChunkrest_docs||[]).push([[582],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,k=d["".concat(s,".").concat(m)]||d[m]||c[m]||l;return a?n.createElement(k,o(o({ref:t},p),{},{components:a})):n.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},t)}},7610:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(7462),r=a(7294),l=a(6010),o=a(2389),i=a(7392),s=a(7094),u=a(2466);const p="tabList__CuJ",d="tabItem_LNqP";function c(e){const{lazy:t,block:a,defaultValue:o,values:c,groupId:m,className:k}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=c??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),h=(0,i.l)(N,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===o?o:o??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==b&&!N.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:f}=(0,s.U)(),[v,T]=(0,r.useState)(b),E=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=m){const e=y[m];null!=e&&e!==v&&N.some((t=>t.value===e))&&T(e)}const L=e=>{const t=e.currentTarget,a=E.indexOf(t),n=N[a].value;n!==v&&(O(t),T(n),null!=m&&f(m,String(n)))},w=e=>{let t=null;switch(e.key){case"Enter":L(e);break;case"ArrowRight":{const a=E.indexOf(e.currentTarget)+1;t=E[a]??E[0];break}case"ArrowLeft":{const a=E.indexOf(e.currentTarget)-1;t=E[a]??E[E.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},k)},N.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>E.push(e),onKeyDown:w,onClick:L},o,{className:(0,l.Z)("tabs__item",d,o?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function m(e){const t=(0,o.Z)();return r.createElement(c,(0,n.Z)({key:String(t)},e))}},3351:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),l=a(7610),o=a(5162);const i={sidebar_position:1},s="API",u={unversionedId:"guides/api",id:"guides/api",title:"API",description:"Example table",source:"@site/docs/guides/api.mdx",sourceDirName:"guides",slug:"/guides/api",permalink:"/docs/guides/api",draft:!1,editUrl:"https://github.com/rest-go/rest-site/edit/main/docs/guides/api.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/docs/category/guides"},next:{title:"Authentication & Authorization",permalink:"/docs/guides/auth"}},p={},d=[{value:"Example table",id:"example-table",level:2},{value:"Filtering",id:"filtering",level:2},{value:"Operators",id:"operators",level:2},{value:"Singular or Plural",id:"singular-or-plural",level:2},{value:"Primary key",id:"primary-key",level:2},{value:"Select columns",id:"select-columns",level:2},{value:"JSON columns",id:"json-columns",level:2},{value:"Select JSON columns",id:"select-json-columns",level:3},{value:"Query JSON columns",id:"query-json-columns",level:3},{value:"Resource embedding",id:"resource-embedding",level:2},{value:"Count",id:"count",level:2},{value:"Order",id:"order",level:2},{value:"Page",id:"page",level:2},{value:"Insert",id:"insert",level:2},{value:"Bulk insert",id:"bulk-insert",level:3},{value:"Update",id:"update",level:2},{value:"Delete",id:"delete",level:2}],c={toc:d};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api"},"API"),(0,r.kt)("h2",{id:"example-table"},"Example table"),(0,r.kt)("p",null,"To demonstrate all the API usage, we will use the below table definition as an example. All tables in the database are exposed in one-level deep routes. For instance, the full contents of a table ",(0,r.kt)("inlineCode",{parentName:"p"},"products")," are returned at ",(0,r.kt)("inlineCode",{parentName:"p"},"/products"),", and it returns\nan empty list when the table has no records."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"pg",label:"PG",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE products (\n    id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n    name VARCHAR(128) NOT NULL,\n    description TEXT NOT NULL,\n    level INTEGER NOT NULL,\n    price DECIMAL(10,2) NOT NULL,\n    hidden BOOL NOT NULL DEFAULT false,\n    json_data JSON\n)\n"))),(0,r.kt)(o.Z,{value:"my",label:"MySQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE products (\n    id INTEGER PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(128) NOT NULL,\n    description TEXT NOT NULL,\n    level INTEGER NOT NULL,\n    price DECIMAL(10,2) NOT NULL,\n    hidden BOOL NOT NULL DEFAULT false,\n    json_data JSON\n)\n"))),(0,r.kt)(o.Z,{value:"sqlite",label:"SQLite",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE products (\n    id INTEGER PRIMARY KEY,\n    name VARCHAR(128) NOT NULL,\n    description TEXT NOT NULL,\n    level INTEGER NOT NULL,\n    price DECIMAL(10,2) NOT NULL,\n    hidden BOOL NOT NULL DEFAULT false,\n    json_data JSON\n)\n")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products"\n\n[]\n')),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"You can filter result rows by adding conditions on columns through query args. For instance, to return products which under level 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?level=lt.2"\n')),(0,r.kt)("p",null,"Multiple conditions could be used. For instance, to return products which under level2 and is not hidden:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?level=lt.2&hidden=is.false"\n')),(0,r.kt)("h2",{id:"operators"},"Operators"),(0,r.kt)("p",null,"These operators are available:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Abbreviation"),(0,r.kt)("th",{parentName:"tr",align:null},"In SQL"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"eq"),(0,r.kt)("td",{parentName:"tr",align:null},"="),(0,r.kt)("td",{parentName:"tr",align:null},"equal, e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"?id=eq.1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ne"),(0,r.kt)("td",{parentName:"tr",align:null},"<",">"),(0,r.kt)("td",{parentName:"tr",align:null},"not equal, , e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"?id=ne.1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gt"),(0,r.kt)("td",{parentName:"tr",align:null},">"),(0,r.kt)("td",{parentName:"tr",align:null},"greater than")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gte"),(0,r.kt)("td",{parentName:"tr",align:null},">="),(0,r.kt)("td",{parentName:"tr",align:null},"greater than or equal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lt"),(0,r.kt)("td",{parentName:"tr",align:null},"<"),(0,r.kt)("td",{parentName:"tr",align:null},"less than")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lte"),(0,r.kt)("td",{parentName:"tr",align:null},"<="),(0,r.kt)("td",{parentName:"tr",align:null},"less than or equal")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"like"),(0,r.kt)("td",{parentName:"tr",align:null},"LIKE"),(0,r.kt)("td",{parentName:"tr",align:null},"LIKE operator (use ","*"," instead of % to avoid URL encoding), e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"?name=like.a*"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ilike"),(0,r.kt)("td",{parentName:"tr",align:null},"ILIKE"),(0,r.kt)("td",{parentName:"tr",align:null},"ILIKE operator (use ","*"," instead of % to avoid URL encoding), e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"?name=ilike.a*"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"in"),(0,r.kt)("td",{parentName:"tr",align:null},"IN"),(0,r.kt)("td",{parentName:"tr",align:null},"one of a list of values, e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"?id=in.(1,2,3)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is"),(0,r.kt)("td",{parentName:"tr",align:null},"IS"),(0,r.kt)("td",{parentName:"tr",align:null},"checking for exact equality  (null,true,false), e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"?hidden=is.true"))))),(0,r.kt)("h2",{id:"singular-or-plural"},"Singular or Plural"),(0,r.kt)("p",null,"By default, all JSON results are returned in an array, even when there is only one item. To return the first result as an object unenclosed by an array\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"singular")," query parameter. "),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"singular")," will check whether there is exactly one row matched in database, it'll return an error if multiple rows matched.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?id=eq.1&singular"\n')),(0,r.kt)("h2",{id:"primary-key"},"Primary key"),(0,r.kt)("p",null,"If there is a primary key defined on the table (which is a good practice), the primary key can be used in the url directly."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Use primary key in url is a syntax sugar of the format ",(0,r.kt)("inlineCode",{parentName:"p"},"?id=eq.1&singular"),", the primary key is dynamically get from table so it could be a name other than ",(0,r.kt)("strong",{parentName:"p"},"id"),", but only\n",(0,r.kt)("strong",{parentName:"p"},"single column")," primary key is supported, composite columns are not supported.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products/1"\n')),(0,r.kt)("h2",{id:"select-columns"},"Select columns"),(0,r.kt)("p",null,"The client can specify which columns to return using the ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," parameter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?select=name,description"\n')),(0,r.kt)("h2",{id:"json-columns"},"JSON columns"),(0,r.kt)("p",null,"When query JSON column, arrow operators(",(0,r.kt)("inlineCode",{parentName:"p"},"->")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"->>"),") can be used to specify a path for the column. There are different syntax for JSON path in different\ndatabases, Rest use as the same syntax as per the ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-json.html"},"PostgreSQL docs"),", and auto transform the syntax to different drivers\nto avoid bad URL characters."),(0,r.kt)("h3",{id:"select-json-columns"},"Select JSON columns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl "localhost:3000/products?select=name,json_data->a,json_data->c->1"\n')),(0,r.kt)("h3",{id:"query-json-columns"},"Query JSON columns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl "localhost:3000/products?select=name&json_data->>c->1=eq.2"\n')),(0,r.kt)("h2",{id:"resource-embedding"},"Resource embedding"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"[Not supported yet, WIP]")," Automatiically fetch related records for one-to-one, one-to-many relations."),(0,r.kt)("h2",{id:"count"},"Count"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," in the query parameters to return rows count of the table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?count"\n')),(0,r.kt)("h2",{id:"order"},"Order"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"order")," in query parameters for SQL order by."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?order=id.desc,name.asc"\n')),(0,r.kt)("h2",{id:"page"},"Page"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"page")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"page_size")," to control paged results. The default page is ",(0,r.kt)("strong",{parentName:"p"},"1"),", and default page size is ",(0,r.kt)("strong",{parentName:"p"},"100"),". You can\nchange them based on the requirement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?page=2&page_size=1"\n')),(0,r.kt)("p",null,"The page operation is implemented using ",(0,r.kt)("inlineCode",{parentName:"p"},"OFFSET")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"LIMIT")," in SQL, it could be slow when trying to fetch big page number, it's a good practice\nto use explicit order by and fetch next page based on  the maxinum value of current page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products?order=id&id=gt.100"\n')),(0,r.kt)("h2",{id:"insert"},"Insert"),(0,r.kt)("p",null,"To insert a row in a database table, post a JSON object whose keys are the names of the columns you would like to insert. Missing properties will be set to default values when applicable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST "localhost:3000/products" -d \'{"name":"n3", "description":"d3", "level":2, "price":10.24, "json_data":"{}"}\'\n\ncurl -XPOST "localhost:3000/products" -d \'{"name":"n4", "description":"d4", "level":3, "price":20.48, "json_data":"{\\"a\\":\\"b\\", \\"b\\":1, \\"c\\":[1,2,3], \\"d\\":{\\"a\\":\\"b\\"}}"}\'\n')),(0,r.kt)("h3",{id:"bulk-insert"},"Bulk insert"),(0,r.kt)("p",null,"You can also provide a JSON array of objects having ",(0,r.kt)("strong",{parentName:"p"},"uniform")," keys to do bulk insertion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST "localhost:3000/products" -d \'[{"name":"n5", "description":"d5", "level":1, "price":1}, {"name":"n6", "description":"d5", "level":1, "price":1}]\'\n')),(0,r.kt)("h2",{id:"update"},"Update"),(0,r.kt)("p",null,"Update an object by passing part of the columns you want to modify using HTTP ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl -XPUT "localhost:3000/products/1" -d \'{"name":"n6"}\'\n')),(0,r.kt)("h2",{id:"delete"},"Delete"),(0,r.kt)("p",null,"Delete matched objects using HTTP ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl -XDELETE "localhost:3000/products/1"\n')))}m.isMDXComponent=!0}}]);