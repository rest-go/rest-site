"use strict";(self.webpackChunkrest_docs=self.webpackChunkrest_docs||[]).push([[323],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||i;return a?n.createElement(m,l(l({ref:t},p),{},{components:a})):n.createElement(m,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(7294),r=a(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:a},t)}},7610:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(7462),r=a(7294),i=a(6010),l=a(2389),o=a(7392),s=a(7094),u=a(2466);const p="tabList__CuJ",d="tabItem_LNqP";function c(e){const{lazy:t,block:a,defaultValue:l,values:c,groupId:h,className:m}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=c??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,o.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===l?l:l??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==N&&!g.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,s.U)(),[T,y]=(0,r.useState)(N),w=[],{blockElementScrollPositionUntilNextRender:_}=(0,u.o5)();if(null!=h){const e=f[h];null!=e&&e!==T&&g.some((t=>t.value===e))&&y(e)}const E=e=>{const t=e.currentTarget,a=w.indexOf(t),n=g[a].value;n!==T&&(_(t),y(n),null!=h&&v(h,String(n)))},O=e=>{let t=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const a=w.indexOf(e.currentTarget)+1;t=w[a]??w[0];break}case"ArrowLeft":{const a=w.indexOf(e.currentTarget)-1;t=w[a]??w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":a},m)},g.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>w.push(e),onKeyDown:O,onClick:E},l,{className:(0,i.Z)("tabs__item",d,l?.className,{"tabs__item--active":T===t})}),a??t)}))),t?(0,r.cloneElement)(k.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function h(e){const t=(0,l.Z)();return r.createElement(c,(0,n.Z)({key:String(t)},e))}},6470:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));a(7610),a(5162);const i={sidebar_position:2},l="Authentication & Authorization",o={unversionedId:"guides/auth",id:"guides/auth",title:"Authentication & Authorization",description:"The authentication & authorization is based on the auth package.",source:"@site/docs/guides/auth.mdx",sourceDirName:"guides",slug:"/guides/auth",permalink:"/docs/guides/auth",draft:!1,editUrl:"https://github.com/rest-go/rest-site/edit/main/docs/guides/auth.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/docs/guides/api"},next:{title:"Security",permalink:"/docs/guides/security"}},s={},u=[{value:"Configuration",id:"configuration",level:2},{value:"Setup",id:"setup",level:2},{value:"Command line",id:"command-line",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Register",id:"register",level:3},{value:"Login",id:"login",level:3},{value:"Logout",id:"logout",level:3},{value:"Authorization",id:"authorization",level:2},{value:"JWT token",id:"jwt-token",level:3},{value:"Default policies",id:"default-policies",level:3},{value:"Action &amp; Expression",id:"action--expression",level:3},{value:"Example policies",id:"example-policies",level:3}],p={toc:u};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"authentication--authorization"},"Authentication & Authorization"),(0,r.kt)("p",null,"The authentication & authorization is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rest-go/rest/tree/main/pkg/auth"},(0,r.kt)("inlineCode",{parentName:"a"},"auth"))," package."),(0,r.kt)("p",null,"It uses JWT token to identify current user and uses the idea of PostgreSQL ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/ddl-rowsecurity.html"},"Row Security Policies")," to control users permission, the policies are implemented in a normal database table so that we don't need to mix database role with appliation user, and it can works for different databases. "),(0,r.kt)("p",null,"The two database tables ",(0,r.kt)("inlineCode",{parentName:"p"},"auth_users")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"auth_policies")," which used to manage authentication and authorization will be created automatically during setup."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"A database URL and a JWT secret is required to setup auth, check the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started/configuration"},"Configuration")," page to see how to config them."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("p",null,"After getting the server running for the first time, send a post to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/auth/setup")," endpoint to setup databasse tables and create an admin account, the username and password will be included in the returned response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -XPOST localhost:3000/auth/setup\n")),(0,r.kt)("h3",{id:"command-line"},"Command line"),(0,r.kt)("p",null,"There are a few useful commands to help manage auth users and policies."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# setup database tables (same effect as POST /auth/setup)\nrest -db.url <url> auth setup\n\n# list users\nrest -db.url <url> auth user list\n# add an user\nrest -db.url <url> auth user add <username> <password> <is_admin>\n\n# list policies\nrest -db.url <url> auth policy list\n# add a policy\nrest -db.url <url> auth policy add <table_name> <action> <exression> <description>\n")),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you're using other system for users management (tokens generation), you can skip this part, and go to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/auth#authorization"},"Authorization")," part to see how to do authorization for auth users.")),(0,r.kt)("p",null,"The authentication part is for user registration, login and logout. The operations is based on a database table ",(0,r.kt)("inlineCode",{parentName:"p"},"auth_users")," which is created during setup. The schema is like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE auth_users (\n  id INTEGER PRIMARY KEY,\n  username VARCHAR(32) UNIQUE NOT NULL,\n  password VARCHAR(72) NOT NULL,\n  is_admin bool NOT NULL DEFAULT false\n)\n")),(0,r.kt)("p",null,"There are three built-in endpoints provided by the auth handler: ",(0,r.kt)("strong",{parentName:"p"},"register"),", ",(0,r.kt)("strong",{parentName:"p"},"login"),", and ",(0,r.kt)("strong",{parentName:"p"},"logout"),"."),(0,r.kt)("h3",{id:"register"},"Register"),(0,r.kt)("p",null,"Register a new user account by username and password."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST localhost:3000/auth/register -d \'{"username": "hello", "password":"world"}\'\n')),(0,r.kt)("h3",{id:"login"},"Login"),(0,r.kt)("p",null,"Login with username and password, a JWT token will be returned in the response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -i -XPOST localhost:3000/auth/login -d \'{"username": "hello", "password":"world"}\n')),(0,r.kt)("p",null,"The token then can be used in other requests to identify user. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products" -H "Authorization: Bearer <TOKEN>"\n')),(0,r.kt)("h3",{id:"logout"},"Logout"),(0,r.kt)("p",null,"Currently, the authentication mechanism is based on JWT token only, logout is a no-op on the\nserver side, the client need clear the token by itself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ curl  -XPOST "localhost:3000/auth/logout"\n')),(0,r.kt)("h2",{id:"authorization"},"Authorization"),(0,r.kt)("p",null,"The authorization part is to control which tables or rows one user can access, the policies are maintained in a database table ",(0,r.kt)("inlineCode",{parentName:"p"},"auth_policies")," which is created during setup. The schema is like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE auth_policies (\n    id INTEGER PRIMARY KEY,\n    description VARCHAR(256) NOT NULL,\n    table_name VARCHAR(128) NOT NULL,\n    action VARCHAR(16) NOT NULL,\n    expression VARCHAR(128) NOT NULL\n)\n")),(0,r.kt)("h3",{id:"jwt-token"},"JWT token"),(0,r.kt)("p",null,"The current auth user is identified by a JWT token passed in the HTTP ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header, the token can either be obtained from the ",(0,r.kt)("strong",{parentName:"p"},"login")," endpoint mentioned in the ",(0,r.kt)("strong",{parentName:"p"},"Authentication")," section above, or is a valid JWT token from other system."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Make sure to use the same JWT secret, and include a ",(0,r.kt)("inlineCode",{parentName:"p"},"user_id")," field  in the JWT claims when using a token from other system.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl "localhost:3000/products" -H "Authorization: Bearer <TOKEN>"\n')),(0,r.kt)("h3",{id:"default-policies"},"Default policies"),(0,r.kt)("p",null,"A few of default polices are created during setup. When auth is not enabled, all the endpoints are publicly accessible by default. After auth is enabled, all the endpoints are controled by the default polices."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"table_name"),(0,r.kt)("th",{parentName:"tr",align:null},"action"),(0,r.kt)("th",{parentName:"tr",align:null},"expression"),(0,r.kt)("th",{parentName:"tr",align:null},"description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"auth_users"),(0,r.kt)("td",{parentName:"tr",align:null},"all"),(0,r.kt)("td",{parentName:"tr",align:null},"auth_user.is_admin"),(0,r.kt)("td",{parentName:"tr",align:null},"users operations are limited to admin user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"auth_policies"),(0,r.kt)("td",{parentName:"tr",align:null},"all"),(0,r.kt)("td",{parentName:"tr",align:null},"auth_user.is_admin"),(0,r.kt)("td",{parentName:"tr",align:null},"policies operations are limited to admin user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"all"),(0,r.kt)("td",{parentName:"tr",align:null},"all"),(0,r.kt)("td",{parentName:"tr",align:null},"user_id = auth_user.id"),(0,r.kt)("td",{parentName:"tr",align:null},"all tables/actions are limited to be filtered by user_id")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The expression ",(0,r.kt)("inlineCode",{parentName:"p"},"user_id = auth_user.id")," indicates that a field named ",(0,r.kt)("inlineCode",{parentName:"p"},"user_id")," is required in the table.")),(0,r.kt)("h3",{id:"action--expression"},"Action & Expression"),(0,r.kt)("p",null,"The value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," column could be one of below values\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"create")," (create a record using HTTP POST)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"read"),"   (read record(s) using HTTP GET)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"update")," (update a record using HTTP PUT)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"delete")," (delete a record using HTTP DELETE)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"read_mine"),"   (read record(s) using HTTP GET and with a ",(0,r.kt)("inlineCode",{parentName:"li"},"?mine")," query parameter)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"all"),"   (all actions above)")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"auth_user")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"expression")," value is a key word to represent current user of the request."),(0,r.kt)("h3",{id:"example-policies"},"Example policies"),(0,r.kt)("p",null,"Below requests require a token from a admin user, you can also add policy through ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/auth#command-line"},"command line"),"."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Make a table public")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST "localhost:3000/auth_policies" -d \'{"table_name": "artists", "action": "all", "expression":"", "description":"make artists public"}\'\n')),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Make a table public, but limited to current user when query with ",(0,r.kt)("inlineCode",{parentName:"li"},"?mine"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST "localhost:3000/auth_policies" -d \'{"table_name": "artists", "action": "all", "expression":"", "description":"make artists public, but limit read_mine"}\'\n\ncurl -XPOST "localhost:3000/auth_policies" -d \'{"table_name": "artists", "action": "read_mine", "expression":"user_id=auth_user.id", "description":"make artists public, but limit read_mine"}\'\n')),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Restrict table access to users who have logged in.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST "localhost:3000/auth_policies" -d \'{"table_name": "artists", "action": "all", "expression":"auth_user.is_authenticated", "description":"restrict table access to users who have logged in"}\'\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Use the column ",(0,r.kt)("strong",{parentName:"li"},"author_id")," on the table to filter user id.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -XPOST "localhost:3000/auth_policies" -d \'{"table_name": "artists", "action": "all", "expression":"author_id=auth_user.id","description":"use author_id column"}\'\n')))}d.isMDXComponent=!0}}]);