"use strict";(self.webpackChunkrest_docs=self.webpackChunkrest_docs||[]).push([[436],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=r,g=p["".concat(s,".").concat(f)]||p[f]||d[f]||o;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2783:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},i="Configuration",l={unversionedId:"getting-started/configuration",id:"getting-started/configuration",title:"Configuration",description:"At the minimum, Rest requires a database URL to connect to be able to serve requests. Rest uses a unified format to connect to various databases. See the Database config section below for the detailed format.",source:"@site/docs/getting-started/configuration.md",sourceDirName:"getting-started",slug:"/getting-started/configuration",permalink:"/docs/getting-started/configuration",draft:!1,editUrl:"https://github.com/rest-go/rest-site/edit/main/docs/getting-started/configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/getting-started/installation"},next:{title:"Guides",permalink:"/docs/category/guides"}},s={},u=[{value:"Flags",id:"flags",level:2},{value:"Config File",id:"config-file",level:2},{value:"config.yml sample",id:"configyml-sample",level:4},{value:"Database Config",id:"database-config",level:2},{value:"Auth config",id:"auth-config",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"At the minimum, Rest requires a database URL to connect to be able to serve requests. Rest uses a unified format to connect to various databases. See the ",(0,r.kt)("a",{parentName:"p",href:"#database-config"},"Database config")," section below for the detailed format."),(0,r.kt)("p",null,"Config parameters are read in the following order:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"From the config file."),(0,r.kt)("li",{parentName:"ol"},"From command-line flags, overriding values from the config file.")),(0,r.kt)("h2",{id:"flags"},"Flags"),(0,r.kt)("p",null,"Common settings can be set by command-line flags directly"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rest -addr :3000 -db.url sqlite://chinook.db\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"-addr <ip:port>")),(0,r.kt)("p",null,"specify listen address"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"-db.url <dsn>")),(0,r.kt)("p",null,"specify database URL"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"-config <path>")),(0,r.kt)("p",null,"specify the config file path"),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"-help")),(0,r.kt)("p",null,"output help message"),(0,r.kt)("h2",{id:"config-file"},"Config File"),(0,r.kt)("p",null,"Rest can read a config file, there is no predefined location for this file, if you want to use a config file, you have to specify the file path manually."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ rest -config config.yml\n")),(0,r.kt)("h4",{id:"configyml-sample"},"config.yml sample"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yml"},"# server listen addr\naddr: :3000\n\n# db config\ndb:\n  url: sqlite://chinook.db\n\n# auth config\nauth:\n  enabled: true\n  secret: [replace-this-to-your-own-secret]\n")),(0,r.kt)("h2",{id:"database-config"},"Database Config"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"url")),(0,r.kt)("p",null,"Specify the database URL to connect to, the URL consists of the driver name and the actual DSN. Supported databases are listed below:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Database"),(0,r.kt)("th",{parentName:"tr",align:null},"URL Format"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PostgreSQL"),(0,r.kt)("td",{parentName:"tr",align:null},"postgres://user:passwd@localhost:5432/db_name?search_path=schema_name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MySQL"),(0,r.kt)("td",{parentName:"tr",align:null},"mysql://user:passwd@tcp(127.0.0.1:3306)/db_name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SQLite"),(0,r.kt)("td",{parentName:"tr",align:null},"sqlite:///path/to/my.db")))),(0,r.kt)("h2",{id:"auth-config"},"Auth config"),(0,r.kt)("p",null,"By default, all the endpoints are public without any authentication. It's suitable to be used as an internal tool or put after a reverse proxy like Nginx. If you want to have user authentication for the API endpoints, you can turn on auth configs. Check the ",(0,r.kt)("a",{parentName:"p",href:"../guides/auth"},"Authentication and Authorization")," guide for the follow-up setup steps and understand how it works."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"enabled")),(0,r.kt)("p",null,"Whether to enable authentication and authorization, default false."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"secret")),(0,r.kt)("p",null,"The JWT secret that used to sign and parse the JWT token."))}p.isMDXComponent=!0}}]);